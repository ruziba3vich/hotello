// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.3
// source: protos/users_proto/users.proto

package users

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UsersService_CreateUserService_FullMethodName        = "/UsersService/CreateUserService"
	UsersService_LoginUserService_FullMethodName         = "/UsersService/LoginUserService"
	UsersService_GetUserByIdService_FullMethodName       = "/UsersService/GetUserByIdService"
	UsersService_GetUserByUsernameService_FullMethodName = "/UsersService/GetUserByUsernameService"
	UsersService_GetUserByEmailService_FullMethodName    = "/UsersService/GetUserByEmailService"
	UsersService_UpdateUsernameService_FullMethodName    = "/UsersService/UpdateUsernameService"
	UsersService_UpdatePasswordService_FullMethodName    = "/UsersService/UpdatePasswordService"
	UsersService_DeleteUserService_FullMethodName        = "/UsersService/DeleteUserService"
	UsersService_VerifyCodeService_FullMethodName        = "/UsersService/VerifyCodeService"
)

// UsersServiceClient is the client API for UsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersServiceClient interface {
	CreateUserService(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
	LoginUserService(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*RawResponse, error)
	GetUserByIdService(ctx context.Context, in *GetUserByFieldRequest, opts ...grpc.CallOption) (*User, error)
	GetUserByUsernameService(ctx context.Context, in *GetUserByFieldRequest, opts ...grpc.CallOption) (*User, error)
	GetUserByEmailService(ctx context.Context, in *GetUserByFieldRequest, opts ...grpc.CallOption) (*User, error)
	UpdateUsernameService(ctx context.Context, in *UpdateUsernameRequest, opts ...grpc.CallOption) (*RawResponse, error)
	UpdatePasswordService(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*RawResponse, error)
	DeleteUserService(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*RawResponse, error)
	VerifyCodeService(ctx context.Context, in *VerifyCodeRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
}

type usersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersServiceClient(cc grpc.ClientConnInterface) UsersServiceClient {
	return &usersServiceClient{cc}
}

func (c *usersServiceClient) CreateUserService(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UsersService_CreateUserService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) LoginUserService(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*RawResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RawResponse)
	err := c.cc.Invoke(ctx, UsersService_LoginUserService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUserByIdService(ctx context.Context, in *GetUserByFieldRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UsersService_GetUserByIdService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUserByUsernameService(ctx context.Context, in *GetUserByFieldRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UsersService_GetUserByUsernameService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUserByEmailService(ctx context.Context, in *GetUserByFieldRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UsersService_GetUserByEmailService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateUsernameService(ctx context.Context, in *UpdateUsernameRequest, opts ...grpc.CallOption) (*RawResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RawResponse)
	err := c.cc.Invoke(ctx, UsersService_UpdateUsernameService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdatePasswordService(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*RawResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RawResponse)
	err := c.cc.Invoke(ctx, UsersService_UpdatePasswordService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) DeleteUserService(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*RawResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RawResponse)
	err := c.cc.Invoke(ctx, UsersService_DeleteUserService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) VerifyCodeService(ctx context.Context, in *VerifyCodeRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, UsersService_VerifyCodeService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServiceServer is the server API for UsersService service.
// All implementations must embed UnimplementedUsersServiceServer
// for forward compatibility
type UsersServiceServer interface {
	CreateUserService(context.Context, *CreateUserRequest) (*User, error)
	LoginUserService(context.Context, *LoginUserRequest) (*RawResponse, error)
	GetUserByIdService(context.Context, *GetUserByFieldRequest) (*User, error)
	GetUserByUsernameService(context.Context, *GetUserByFieldRequest) (*User, error)
	GetUserByEmailService(context.Context, *GetUserByFieldRequest) (*User, error)
	UpdateUsernameService(context.Context, *UpdateUsernameRequest) (*RawResponse, error)
	UpdatePasswordService(context.Context, *UpdatePasswordRequest) (*RawResponse, error)
	DeleteUserService(context.Context, *DeleteUserRequest) (*RawResponse, error)
	VerifyCodeService(context.Context, *VerifyCodeRequest) (*LoginUserResponse, error)
	mustEmbedUnimplementedUsersServiceServer()
}

// UnimplementedUsersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServiceServer struct {
}

func (UnimplementedUsersServiceServer) CreateUserService(context.Context, *CreateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserService not implemented")
}
func (UnimplementedUsersServiceServer) LoginUserService(context.Context, *LoginUserRequest) (*RawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUserService not implemented")
}
func (UnimplementedUsersServiceServer) GetUserByIdService(context.Context, *GetUserByFieldRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByIdService not implemented")
}
func (UnimplementedUsersServiceServer) GetUserByUsernameService(context.Context, *GetUserByFieldRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByUsernameService not implemented")
}
func (UnimplementedUsersServiceServer) GetUserByEmailService(context.Context, *GetUserByFieldRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByEmailService not implemented")
}
func (UnimplementedUsersServiceServer) UpdateUsernameService(context.Context, *UpdateUsernameRequest) (*RawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUsernameService not implemented")
}
func (UnimplementedUsersServiceServer) UpdatePasswordService(context.Context, *UpdatePasswordRequest) (*RawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePasswordService not implemented")
}
func (UnimplementedUsersServiceServer) DeleteUserService(context.Context, *DeleteUserRequest) (*RawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserService not implemented")
}
func (UnimplementedUsersServiceServer) VerifyCodeService(context.Context, *VerifyCodeRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCodeService not implemented")
}
func (UnimplementedUsersServiceServer) mustEmbedUnimplementedUsersServiceServer() {}

// UnsafeUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServiceServer will
// result in compilation errors.
type UnsafeUsersServiceServer interface {
	mustEmbedUnimplementedUsersServiceServer()
}

func RegisterUsersServiceServer(s grpc.ServiceRegistrar, srv UsersServiceServer) {
	s.RegisterService(&UsersService_ServiceDesc, srv)
}

func _UsersService_CreateUserService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CreateUserService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_CreateUserService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CreateUserService(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_LoginUserService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).LoginUserService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_LoginUserService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).LoginUserService(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUserByIdService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserByIdService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_GetUserByIdService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserByIdService(ctx, req.(*GetUserByFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUserByUsernameService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserByUsernameService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_GetUserByUsernameService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserByUsernameService(ctx, req.(*GetUserByFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUserByEmailService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserByEmailService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_GetUserByEmailService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserByEmailService(ctx, req.(*GetUserByFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UpdateUsernameService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdateUsernameService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_UpdateUsernameService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdateUsernameService(ctx, req.(*UpdateUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UpdatePasswordService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdatePasswordService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_UpdatePasswordService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdatePasswordService(ctx, req.(*UpdatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_DeleteUserService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).DeleteUserService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_DeleteUserService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).DeleteUserService(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_VerifyCodeService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).VerifyCodeService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_VerifyCodeService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).VerifyCodeService(ctx, req.(*VerifyCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersService_ServiceDesc is the grpc.ServiceDesc for UsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UsersService",
	HandlerType: (*UsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserService",
			Handler:    _UsersService_CreateUserService_Handler,
		},
		{
			MethodName: "LoginUserService",
			Handler:    _UsersService_LoginUserService_Handler,
		},
		{
			MethodName: "GetUserByIdService",
			Handler:    _UsersService_GetUserByIdService_Handler,
		},
		{
			MethodName: "GetUserByUsernameService",
			Handler:    _UsersService_GetUserByUsernameService_Handler,
		},
		{
			MethodName: "GetUserByEmailService",
			Handler:    _UsersService_GetUserByEmailService_Handler,
		},
		{
			MethodName: "UpdateUsernameService",
			Handler:    _UsersService_UpdateUsernameService_Handler,
		},
		{
			MethodName: "UpdatePasswordService",
			Handler:    _UsersService_UpdatePasswordService_Handler,
		},
		{
			MethodName: "DeleteUserService",
			Handler:    _UsersService_DeleteUserService_Handler,
		},
		{
			MethodName: "VerifyCodeService",
			Handler:    _UsersService_VerifyCodeService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/users_proto/users.proto",
}
