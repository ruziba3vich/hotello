// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.3
// source: hotels_proto/hotel.proto

package hotels

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	HotelsService_CreateHotelService_FullMethodName              = "/HotelsService/CreateHotelService"
	HotelsService_CreateRoomService_FullMethodName               = "/HotelsService/CreateRoomService"
	HotelsService_GetAvailableRoomsByHotelService_FullMethodName = "/HotelsService/GetAvailableRoomsByHotelService"
	HotelsService_GetHotelByIdService_FullMethodName             = "/HotelsService/GetHotelByIdService"
	HotelsService_GetAllHotelsService_FullMethodName             = "/HotelsService/GetAllHotelsService"
	HotelsService_AddRoomToHotelService_FullMethodName           = "/HotelsService/AddRoomToHotelService"
	HotelsService_SetRoomToAvailableService_FullMethodName       = "/HotelsService/SetRoomToAvailableService"
	HotelsService_SetRoomToUnavailableService_FullMethodName     = "/HotelsService/SetRoomToUnavailableService"
)

// HotelsServiceClient is the client API for HotelsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HotelsServiceClient interface {
	CreateHotelService(ctx context.Context, in *CreateHotelRequest, opts ...grpc.CallOption) (*Hotel, error)
	CreateRoomService(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*Room, error)
	GetAvailableRoomsByHotelService(ctx context.Context, in *GetAvailableRoomsByHotelRequest, opts ...grpc.CallOption) (*GetAvailableRoomsByHotelResponse, error)
	GetHotelByIdService(ctx context.Context, in *GetHotelByIdRequest, opts ...grpc.CallOption) (*GetHotelByIdResponse, error)
	GetAllHotelsService(ctx context.Context, in *GetAllHotelsRequest, opts ...grpc.CallOption) (*GetAllHotelsResponse, error)
	AddRoomToHotelService(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*Room, error)
	SetRoomToAvailableService(ctx context.Context, in *SetRoomToAvailableRequest, opts ...grpc.CallOption) (*Room, error)
	SetRoomToUnavailableService(ctx context.Context, in *SetRoomToUnavailableRequest, opts ...grpc.CallOption) (*Room, error)
}

type hotelsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHotelsServiceClient(cc grpc.ClientConnInterface) HotelsServiceClient {
	return &hotelsServiceClient{cc}
}

func (c *hotelsServiceClient) CreateHotelService(ctx context.Context, in *CreateHotelRequest, opts ...grpc.CallOption) (*Hotel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Hotel)
	err := c.cc.Invoke(ctx, HotelsService_CreateHotelService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelsServiceClient) CreateRoomService(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*Room, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Room)
	err := c.cc.Invoke(ctx, HotelsService_CreateRoomService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelsServiceClient) GetAvailableRoomsByHotelService(ctx context.Context, in *GetAvailableRoomsByHotelRequest, opts ...grpc.CallOption) (*GetAvailableRoomsByHotelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAvailableRoomsByHotelResponse)
	err := c.cc.Invoke(ctx, HotelsService_GetAvailableRoomsByHotelService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelsServiceClient) GetHotelByIdService(ctx context.Context, in *GetHotelByIdRequest, opts ...grpc.CallOption) (*GetHotelByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHotelByIdResponse)
	err := c.cc.Invoke(ctx, HotelsService_GetHotelByIdService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelsServiceClient) GetAllHotelsService(ctx context.Context, in *GetAllHotelsRequest, opts ...grpc.CallOption) (*GetAllHotelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllHotelsResponse)
	err := c.cc.Invoke(ctx, HotelsService_GetAllHotelsService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelsServiceClient) AddRoomToHotelService(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*Room, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Room)
	err := c.cc.Invoke(ctx, HotelsService_AddRoomToHotelService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelsServiceClient) SetRoomToAvailableService(ctx context.Context, in *SetRoomToAvailableRequest, opts ...grpc.CallOption) (*Room, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Room)
	err := c.cc.Invoke(ctx, HotelsService_SetRoomToAvailableService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelsServiceClient) SetRoomToUnavailableService(ctx context.Context, in *SetRoomToUnavailableRequest, opts ...grpc.CallOption) (*Room, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Room)
	err := c.cc.Invoke(ctx, HotelsService_SetRoomToUnavailableService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotelsServiceServer is the server API for HotelsService service.
// All implementations must embed UnimplementedHotelsServiceServer
// for forward compatibility
type HotelsServiceServer interface {
	CreateHotelService(context.Context, *CreateHotelRequest) (*Hotel, error)
	CreateRoomService(context.Context, *CreateRoomRequest) (*Room, error)
	GetAvailableRoomsByHotelService(context.Context, *GetAvailableRoomsByHotelRequest) (*GetAvailableRoomsByHotelResponse, error)
	GetHotelByIdService(context.Context, *GetHotelByIdRequest) (*GetHotelByIdResponse, error)
	GetAllHotelsService(context.Context, *GetAllHotelsRequest) (*GetAllHotelsResponse, error)
	AddRoomToHotelService(context.Context, *CreateRoomRequest) (*Room, error)
	SetRoomToAvailableService(context.Context, *SetRoomToAvailableRequest) (*Room, error)
	SetRoomToUnavailableService(context.Context, *SetRoomToUnavailableRequest) (*Room, error)
	mustEmbedUnimplementedHotelsServiceServer()
}

// UnimplementedHotelsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHotelsServiceServer struct {
}

func (UnimplementedHotelsServiceServer) CreateHotelService(context.Context, *CreateHotelRequest) (*Hotel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHotelService not implemented")
}
func (UnimplementedHotelsServiceServer) CreateRoomService(context.Context, *CreateRoomRequest) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoomService not implemented")
}
func (UnimplementedHotelsServiceServer) GetAvailableRoomsByHotelService(context.Context, *GetAvailableRoomsByHotelRequest) (*GetAvailableRoomsByHotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableRoomsByHotelService not implemented")
}
func (UnimplementedHotelsServiceServer) GetHotelByIdService(context.Context, *GetHotelByIdRequest) (*GetHotelByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotelByIdService not implemented")
}
func (UnimplementedHotelsServiceServer) GetAllHotelsService(context.Context, *GetAllHotelsRequest) (*GetAllHotelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllHotelsService not implemented")
}
func (UnimplementedHotelsServiceServer) AddRoomToHotelService(context.Context, *CreateRoomRequest) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoomToHotelService not implemented")
}
func (UnimplementedHotelsServiceServer) SetRoomToAvailableService(context.Context, *SetRoomToAvailableRequest) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRoomToAvailableService not implemented")
}
func (UnimplementedHotelsServiceServer) SetRoomToUnavailableService(context.Context, *SetRoomToUnavailableRequest) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRoomToUnavailableService not implemented")
}
func (UnimplementedHotelsServiceServer) mustEmbedUnimplementedHotelsServiceServer() {}

// UnsafeHotelsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HotelsServiceServer will
// result in compilation errors.
type UnsafeHotelsServiceServer interface {
	mustEmbedUnimplementedHotelsServiceServer()
}

func RegisterHotelsServiceServer(s grpc.ServiceRegistrar, srv HotelsServiceServer) {
	s.RegisterService(&HotelsService_ServiceDesc, srv)
}

func _HotelsService_CreateHotelService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelsServiceServer).CreateHotelService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelsService_CreateHotelService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelsServiceServer).CreateHotelService(ctx, req.(*CreateHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelsService_CreateRoomService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelsServiceServer).CreateRoomService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelsService_CreateRoomService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelsServiceServer).CreateRoomService(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelsService_GetAvailableRoomsByHotelService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableRoomsByHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelsServiceServer).GetAvailableRoomsByHotelService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelsService_GetAvailableRoomsByHotelService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelsServiceServer).GetAvailableRoomsByHotelService(ctx, req.(*GetAvailableRoomsByHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelsService_GetHotelByIdService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotelByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelsServiceServer).GetHotelByIdService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelsService_GetHotelByIdService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelsServiceServer).GetHotelByIdService(ctx, req.(*GetHotelByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelsService_GetAllHotelsService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllHotelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelsServiceServer).GetAllHotelsService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelsService_GetAllHotelsService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelsServiceServer).GetAllHotelsService(ctx, req.(*GetAllHotelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelsService_AddRoomToHotelService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelsServiceServer).AddRoomToHotelService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelsService_AddRoomToHotelService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelsServiceServer).AddRoomToHotelService(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelsService_SetRoomToAvailableService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRoomToAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelsServiceServer).SetRoomToAvailableService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelsService_SetRoomToAvailableService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelsServiceServer).SetRoomToAvailableService(ctx, req.(*SetRoomToAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelsService_SetRoomToUnavailableService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRoomToUnavailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelsServiceServer).SetRoomToUnavailableService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelsService_SetRoomToUnavailableService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelsServiceServer).SetRoomToUnavailableService(ctx, req.(*SetRoomToUnavailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HotelsService_ServiceDesc is the grpc.ServiceDesc for HotelsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HotelsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HotelsService",
	HandlerType: (*HotelsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHotelService",
			Handler:    _HotelsService_CreateHotelService_Handler,
		},
		{
			MethodName: "CreateRoomService",
			Handler:    _HotelsService_CreateRoomService_Handler,
		},
		{
			MethodName: "GetAvailableRoomsByHotelService",
			Handler:    _HotelsService_GetAvailableRoomsByHotelService_Handler,
		},
		{
			MethodName: "GetHotelByIdService",
			Handler:    _HotelsService_GetHotelByIdService_Handler,
		},
		{
			MethodName: "GetAllHotelsService",
			Handler:    _HotelsService_GetAllHotelsService_Handler,
		},
		{
			MethodName: "AddRoomToHotelService",
			Handler:    _HotelsService_AddRoomToHotelService_Handler,
		},
		{
			MethodName: "SetRoomToAvailableService",
			Handler:    _HotelsService_SetRoomToAvailableService_Handler,
		},
		{
			MethodName: "SetRoomToUnavailableService",
			Handler:    _HotelsService_SetRoomToUnavailableService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hotels_proto/hotel.proto",
}
