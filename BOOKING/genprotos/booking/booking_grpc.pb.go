// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.3
// source: booking_proto/booking.proto

package booking

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BookingService_BookRoomService_FullMethodName                 = "/BookingService/BookRoomService"
	BookingService_RevokeOrderService_FullMethodName              = "/BookingService/RevokeOrderService"
	BookingService_GetBookingsByUserIdService_FullMethodName      = "/BookingService/GetBookingsByUserIdService"
	BookingService_GetNotificationsByUserIdService_FullMethodName = "/BookingService/GetNotificationsByUserIdService"
	BookingService_GetRoomAvailabilityService_FullMethodName      = "/BookingService/GetRoomAvailabilityService"
	BookingService_GetNotificationByIdService_FullMethodName      = "/BookingService/GetNotificationByIdService"
)

// BookingServiceClient is the client API for BookingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookingServiceClient interface {
	BookRoomService(ctx context.Context, in *BookRoomRequest, opts ...grpc.CallOption) (*RawResponse, error)
	RevokeOrderService(ctx context.Context, in *RevokeOrderRequest, opts ...grpc.CallOption) (*RawResponse, error)
	GetBookingsByUserIdService(ctx context.Context, in *GetBookingsByUserIdRequest, opts ...grpc.CallOption) (*GetBookingsByUserIdResponse, error)
	// rpc SendNotification            (Notification)                    returns (google.protobuf.Empty);
	GetNotificationsByUserIdService(ctx context.Context, in *GetNotificationsByUserIdRequest, opts ...grpc.CallOption) (*GetNotificationsResponse, error)
	GetRoomAvailabilityService(ctx context.Context, in *GetRoomAvailabilityRequest, opts ...grpc.CallOption) (*GetRoomAvailabilityResponse, error)
	GetNotificationByIdService(ctx context.Context, in *GetNotificationByIdRequest, opts ...grpc.CallOption) (*Notification, error)
}

type bookingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookingServiceClient(cc grpc.ClientConnInterface) BookingServiceClient {
	return &bookingServiceClient{cc}
}

func (c *bookingServiceClient) BookRoomService(ctx context.Context, in *BookRoomRequest, opts ...grpc.CallOption) (*RawResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RawResponse)
	err := c.cc.Invoke(ctx, BookingService_BookRoomService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) RevokeOrderService(ctx context.Context, in *RevokeOrderRequest, opts ...grpc.CallOption) (*RawResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RawResponse)
	err := c.cc.Invoke(ctx, BookingService_RevokeOrderService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) GetBookingsByUserIdService(ctx context.Context, in *GetBookingsByUserIdRequest, opts ...grpc.CallOption) (*GetBookingsByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBookingsByUserIdResponse)
	err := c.cc.Invoke(ctx, BookingService_GetBookingsByUserIdService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) GetNotificationsByUserIdService(ctx context.Context, in *GetNotificationsByUserIdRequest, opts ...grpc.CallOption) (*GetNotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNotificationsResponse)
	err := c.cc.Invoke(ctx, BookingService_GetNotificationsByUserIdService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) GetRoomAvailabilityService(ctx context.Context, in *GetRoomAvailabilityRequest, opts ...grpc.CallOption) (*GetRoomAvailabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoomAvailabilityResponse)
	err := c.cc.Invoke(ctx, BookingService_GetRoomAvailabilityService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) GetNotificationByIdService(ctx context.Context, in *GetNotificationByIdRequest, opts ...grpc.CallOption) (*Notification, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Notification)
	err := c.cc.Invoke(ctx, BookingService_GetNotificationByIdService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookingServiceServer is the server API for BookingService service.
// All implementations must embed UnimplementedBookingServiceServer
// for forward compatibility
type BookingServiceServer interface {
	BookRoomService(context.Context, *BookRoomRequest) (*RawResponse, error)
	RevokeOrderService(context.Context, *RevokeOrderRequest) (*RawResponse, error)
	GetBookingsByUserIdService(context.Context, *GetBookingsByUserIdRequest) (*GetBookingsByUserIdResponse, error)
	// rpc SendNotification            (Notification)                    returns (google.protobuf.Empty);
	GetNotificationsByUserIdService(context.Context, *GetNotificationsByUserIdRequest) (*GetNotificationsResponse, error)
	GetRoomAvailabilityService(context.Context, *GetRoomAvailabilityRequest) (*GetRoomAvailabilityResponse, error)
	GetNotificationByIdService(context.Context, *GetNotificationByIdRequest) (*Notification, error)
	mustEmbedUnimplementedBookingServiceServer()
}

// UnimplementedBookingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookingServiceServer struct {
}

func (UnimplementedBookingServiceServer) BookRoomService(context.Context, *BookRoomRequest) (*RawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookRoomService not implemented")
}
func (UnimplementedBookingServiceServer) RevokeOrderService(context.Context, *RevokeOrderRequest) (*RawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeOrderService not implemented")
}
func (UnimplementedBookingServiceServer) GetBookingsByUserIdService(context.Context, *GetBookingsByUserIdRequest) (*GetBookingsByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookingsByUserIdService not implemented")
}
func (UnimplementedBookingServiceServer) GetNotificationsByUserIdService(context.Context, *GetNotificationsByUserIdRequest) (*GetNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationsByUserIdService not implemented")
}
func (UnimplementedBookingServiceServer) GetRoomAvailabilityService(context.Context, *GetRoomAvailabilityRequest) (*GetRoomAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomAvailabilityService not implemented")
}
func (UnimplementedBookingServiceServer) GetNotificationByIdService(context.Context, *GetNotificationByIdRequest) (*Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationByIdService not implemented")
}
func (UnimplementedBookingServiceServer) mustEmbedUnimplementedBookingServiceServer() {}

// UnsafeBookingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookingServiceServer will
// result in compilation errors.
type UnsafeBookingServiceServer interface {
	mustEmbedUnimplementedBookingServiceServer()
}

func RegisterBookingServiceServer(s grpc.ServiceRegistrar, srv BookingServiceServer) {
	s.RegisterService(&BookingService_ServiceDesc, srv)
}

func _BookingService_BookRoomService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).BookRoomService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_BookRoomService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).BookRoomService(ctx, req.(*BookRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_RevokeOrderService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).RevokeOrderService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_RevokeOrderService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).RevokeOrderService(ctx, req.(*RevokeOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_GetBookingsByUserIdService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookingsByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).GetBookingsByUserIdService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_GetBookingsByUserIdService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).GetBookingsByUserIdService(ctx, req.(*GetBookingsByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_GetNotificationsByUserIdService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationsByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).GetNotificationsByUserIdService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_GetNotificationsByUserIdService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).GetNotificationsByUserIdService(ctx, req.(*GetNotificationsByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_GetRoomAvailabilityService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).GetRoomAvailabilityService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_GetRoomAvailabilityService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).GetRoomAvailabilityService(ctx, req.(*GetRoomAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_GetNotificationByIdService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).GetNotificationByIdService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_GetNotificationByIdService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).GetNotificationByIdService(ctx, req.(*GetNotificationByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookingService_ServiceDesc is the grpc.ServiceDesc for BookingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BookingService",
	HandlerType: (*BookingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BookRoomService",
			Handler:    _BookingService_BookRoomService_Handler,
		},
		{
			MethodName: "RevokeOrderService",
			Handler:    _BookingService_RevokeOrderService_Handler,
		},
		{
			MethodName: "GetBookingsByUserIdService",
			Handler:    _BookingService_GetBookingsByUserIdService_Handler,
		},
		{
			MethodName: "GetNotificationsByUserIdService",
			Handler:    _BookingService_GetNotificationsByUserIdService_Handler,
		},
		{
			MethodName: "GetRoomAvailabilityService",
			Handler:    _BookingService_GetRoomAvailabilityService_Handler,
		},
		{
			MethodName: "GetNotificationByIdService",
			Handler:    _BookingService_GetNotificationByIdService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking_proto/booking.proto",
}
